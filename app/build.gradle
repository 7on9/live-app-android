buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://jitpack.io' }
        mavenCentral()
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
        classpath 'com.github.Mindera:gradle-slack-plugin:1.0.4'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.mindera.gradle.slack'
apply plugin: 'realm-android'
apply plugin: 'com.google.gms.google-services'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    maven { url 'http://hypertrack-android-sdk.s3-website-us-west-2.amazonaws.com/' }
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy.MM.dd.HH.mm.ss')
    return formattedDate
}

android {

    compileSdkVersion 23
    buildToolsVersion "23.0.2"
    lintOptions {
        abortOnError false
    }
    def versionPropsFile = file('gradle.properties')
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        def value = 0

        def runTasks = gradle.startParameter.taskNames
        if ('cUDD' in runTasks || 'crashlyticsUploadDistributionDebug' in runTasks
                || 'cUDR' in runTasks || 'crashlyticsUploadDistributionRelease' in runTasks) {
            value = 1;
        }

        def versionMajor = 1
        def versionMinor = 0
        def versionPatch = versionProps['VERSION_PATCH'].toInteger() + value
//        def versionBuild = getDate()//versionProps['VERSION_BUILD'].toInteger() + 1
        def versionNumber = versionProps['VERSION_NUMBER'].toInteger() + value

        versionProps['VERSION_PATCH'] = versionPatch.toString()
//        versionProps['VERSION_BUILD'] = versionBuild.toString()
        versionProps['VERSION_NUMBER'] = versionNumber.toString()
        versionProps['version'] = versionMajor + "." + versionMinor + "." + versionPatch
        versionProps.store(versionPropsFile.newWriter(), null)

        defaultConfig {
            applicationId "io.hypertrack.sendeta"
            versionCode versionNumber
            versionName "${versionMajor}.${versionMinor}.${versionPatch}"
            minSdkVersion 19
            targetSdkVersion 23
            manifestPlaceholders = [applicationLabel: "@string/app_name"]
        }

    } else {
        throw new GradleException("Could not read version.properties!")
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFile = new File(
                    output.outputFile.parent,
                    output.outputFile.name.replace("app-debug.apk", "SendETA-${variant.versionName}.apk"))
        }
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "API_KEY", '"pk_e956d4c123e8b726c10b553fe62bbaa9c1ac9451"'
            buildConfigField "String", "BASE_URL", '"http://api.sendeta.com"'
            resValue "string", "facebook_app_id", "1544357779206506"
            ext.betaDistributionReleaseNotes = "BETA distribution via Gradle"
            ext.betaDistributionEmails = "ulhas@hypertrack.io, piyush@hypertrack.io"
        }
        debug {
            debuggable true
            versionNameSuffix '-debug'
            applicationIdSuffix ".debug"
            manifestPlaceholders = [applicationLabel: "SendETA Debug"]
            buildConfigField "String", "API_KEY", '"pk_03e3176a9831360e162093292049757b130c75cf"'
            buildConfigField "String", "BASE_URL", '"http://meta-api-staging.herokuapp.com/"'
            resValue "string", "facebook_app_id", "1548496698792614"
            ext.betaDistributionReleaseNotes = "BETA distribution via Gradle"
            ext.betaDistributionEmails = "ulhas@hypertrack.io, piyush@hypertrack.io"
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    debugCompile 'com.facebook.stetho:stetho:1.2.0'
    compile 'com.android.support:appcompat-v7:23.3.0'
    compile 'com.android.support:design:23.3.0'
    compile 'com.android.support:cardview-v7:23.3.0'
    compile 'com.android.support:recyclerview-v7:23.3.0'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'com.googlecode.libphonenumber:libphonenumber:7.2.3'
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    compile 'com.squareup.picasso:picasso:2.4.0'
    debugCompile('io.hypertrack:transmitter:1.0.5:debug@aar') {
        transitive = true;
    }
    releaseCompile('io.hypertrack:transmitter:1.0.5:release@aar') {
        transitive = true;
    }
    debugCompile('io.hypertrack:consumer:0.4.13:debug@aar') {
        transitive = true;
    }
    releaseCompile('io.hypertrack:consumer:0.4.13:release@aar') {
        transitive = true;
    }
//    compile 'com.google.maps.android:android-maps-utils:0.5.0-beta'
    compile 'com.google.android.gms:play-services-gcm:8.3.0'
    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }
    compile 'com.facebook.android:facebook-android-sdk:[4,5)'
}