buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://jitpack.io' }
        mavenCentral()
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.22.0'
        classpath 'com.github.Mindera:gradle-slack-plugin:1.0.4'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.mindera.gradle.slack'
apply plugin: 'realm-android'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    maven { url 'http://hypertrack-android-sdk.s3-website-us-west-2.amazonaws.com/' }
}

ext {
    hypertrackSDKVersion = computeHyperTrackSDKVersion()
}

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.2'
    lintOptions {
        abortOnError false
    }

    def keystorePropertiesFile = rootProject.file("keystore.properties");
    def keystoreProperties = new Properties()
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

    def hyperTrackKeyPropertiesFile = rootProject.file("hypertrackkey.properties");
    def hyperTrackKeyProperties = new Properties()
    hyperTrackKeyProperties.load(new FileInputStream(hyperTrackKeyPropertiesFile))

    signingConfigs {
        release {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }

    def versionPropsFile = file('gradle.properties')
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        def value = 0

        def runTasks = gradle.startParameter.taskNames
        if ('cUDD' in runTasks || 'crashlyticsUploadDistributionDebug' in runTasks
                || 'cUDR' in runTasks || 'crashlyticsUploadDistributionRelease' in runTasks) {
            value = 1;
        }

        def versionMajor = 1
        def versionMinor = 4
        def versionPatch = versionProps['VERSION_PATCH'].toInteger() + value
        def versionNumber = versionProps['VERSION_NUMBER'].toInteger() + value

        versionProps['VERSION_PATCH'] = versionPatch.toString()
        versionProps['VERSION_NUMBER'] = versionNumber.toString()
        versionProps['version'] = versionMajor + "." + versionMinor + "." + versionPatch
        versionProps.store(versionPropsFile.newWriter(), null)

        defaultConfig {
            applicationId "io.hypertrack.sendeta"
            versionCode versionNumber
            versionName "${versionMajor}.${versionMinor}.${versionPatch}"
            minSdkVersion 19
            targetSdkVersion 25
            resValue "string", "app_name", "HyperTrack Live"

            multiDexEnabled true
        }

    } else {
        throw new GradleException("Could not read version.properties!")
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def newFileName = "HyperTrackLive-${variant.versionName}.apk";
            def apk = output.outputFile;
            output.outputFile = new File(apk.parentFile, newFileName);
        }
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "HYPERTRACK_PK", hyperTrackKeyProperties['publishableKey']
            manifestPlaceholders = [applicationLabel: "@string/app_name"]
            buildConfigField "String", "HYPERTRACK_BASE_URL", '"https://api.hypertrack.com/api/v1/"'
            resValue "string", "deeplink_scheme", "com.hypertracklive"
            resValue "string", "tracking_url", "www.trck.at"
            resValue "string", "facebook_app_id", "1544357779206506"
            signingConfig signingConfigs.release
        }
        debug {
            debuggable true
            versionNameSuffix '-debug'
            applicationIdSuffix ".debug"
            resValue "string", "app_name", "Debug HyperTrack Live"
            buildConfigField "String", "HYPERTRACK_PK", hyperTrackKeyProperties['testPublishableKey']
            manifestPlaceholders = [applicationLabel: "@string/app_name"]
            buildConfigField "String", "HYPERTRACK_BASE_URL", '"https://staging-api.hypertrack.com/api/v1/"'
            resValue "string", "deeplink_scheme", "com.hypertracklive.staging"
            resValue "string", "tracking_url", "www.trck.at"
            resValue "string", "facebook_app_id", "1548496698792614"
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    debugCompile 'com.facebook.stetho:stetho:1.2.0'
    compile('com.crashlytics.sdk.android:crashlytics:2.6.2@aar') {
        transitive = true;
    }

    releaseCompile('com.hypertrack:android:' + hypertrackSDKVersion + ':release@aar') {
        transitive = true
    }

    /*releaseCompile(project(path: ':library', configuration: 'release')) {
        transitive = true
    }*/

    debugCompile(project(path: ':library', configuration: 'debug')) {
        transitive = true
    }

    compile 'com.android.support:appcompat-v7:25.3.0'
    compile 'com.android.support:design:25.3.0'
    compile 'com.android.support:cardview-v7:25.3.0'
    compile 'com.android.support:recyclerview-v7:25.3.0'
    compile 'com.googlecode.libphonenumber:libphonenumber:8.4.2'
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    compile 'com.squareup.picasso:picasso:2.4.0'
    compile 'com.github.tajchert:WaitingDots:0.4.0'
    compile 'com.google.android.gms:play-services-gcm:10.2.0'
    compile 'com.google.android.gms:play-services-places:10.2.0'
    compile 'com.google.android.gms:play-services-location:10.2.0'
    compile 'com.facebook.android:facebook-android-sdk:4.16.1'

}

// Compute HyperTrack SDKVersion
def computeHyperTrackSDKVersion() {
    def versionPropsFile = file('gradle.properties')

    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        return versionProps['HYPERTRACK_SDK_VERSION']

    } else {
        throw new GradleException("Could not read version.properties!")
    }
}

apply plugin: 'com.google.gms.google-services'